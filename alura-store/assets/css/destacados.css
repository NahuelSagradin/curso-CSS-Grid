/*Configuración y posicionamiento de los elementos de nuestra area de destaques: */

/*Para crear nuestra seccion de destacados similar a la que tenemos como ejemplo en el archivo prototipo.pdf, primeramente tenemos que definirlo como grid y vamos a definir también cuántas columnas y cuantas filas tiene. */

.destaques {

    display: grid;
    /*necesito definir 4 columnas y que todas tengan las mismas proporciones; */
    grid-template-columns: 25% 25% 25% 25%;
    /*lo mismo ocurre con las filas; */
    grid-template-rows: 33.33% 33.33% 33.33%;
    /*Ahora bien, yo necesito que mi seccion de destaque ocupe el 100% de la pantalla. Ya habíamos definido el header con 50 pixeles, la parte de sección de contenidos era el 100% de mi pantalla, y el rodapié que estaba en modo automático, entonces ahora yo quiero que la parte destacada me cubra el 100% de la pantalla, esto lo consigo aplicando la propiedad; */
    height: calc(100vh - 50px); /*en este caso vamos a colocar una altura a la sección de destaque que calcule el 100% de la pantalla, de nuestro navegador teniendo en cuenta que la misma debe comenzar a partir de de la altura asignada a nuestro encabezado.*/

}

/*Ahora hay que colocar y posicionar nuestros elementos para que se aproxime lo más posible a nuestro prototipo. 

Si revisamos nuestro HTML, en nuestra seccion de destaque en donde cada imagen esta definida por una seccion principal y unas secciones secundarias, con areas 1, 2, 3 , 4 y luego la seccion de categorías.

Para comenzar a definir nuestra imagen pricipal, debemos identificar su clase correspondiente a la cual le vamos aplicar las propiedades grid. */

.destaques__principal {
    /*nuestra imagen principal debe ocupar tres columnas  y dos filas, esto se consigue aplicando la propiedad; */
    background: url('../img/fortnite.jpg'); /*esta propiedad me permite agregar una imagen como fondo de mi elemento*/
    background-size: cover; /*con esta propiedad puedo hacer que mi imagen de background ocupe todo el espacio que le corresponde*/
    background-position: center; /*me permite centrar mi imagen de background*/
    background-repeat: no-repeat; /*en los casos en los que el tamaño de la imagen sea menor a la del contenedor esta comenzara a repetirse, esto lo podemos evitar aplicando esta propiedad.*/
    /*es necesario definir la cantidad de columnas que queremos que nuestro contenedor ocupe; */
    grid-column-start: 1;/*me permite definir en que columna comienza dicho contenedor.*/
    grid-column-end: 4; /*me permite definir en que columna va terminar.*/
    
    /*Del mismo modo es necesario definir la cantidad de lineas que queremos que ocupe nuestro contenedor;*/
    grid-row-start: 1; /*me permite definir en que linea va comenzar mi contenedor.*/
    grid-row-end: 3; /*me permite definir en que linea va a terminar.*/

}

/*Ahora nos encontramos con una dificultad, tenemos varias imagenes bajo una misma clase, una primera opcion para resolver esto es renombrar las clases, lo cual ademas de ser tedioso aumenta el volumen de nuestro codigo, otra opcion es utilizar la propiedad 'nth-child()' para identificarlas segun su indice; */
.destaques__secundario:nth-child(2) {
    /*Para evitar repetir mucho código y con la intención de intentar reducir la cantidad de líneas de código convirtiéndolas en atajos o reduciendo el código en una o dos líneas se recomienda utilizar buenas practicas como las que vamos a ver a continuacion, en solo tres lineas resolvimos lo que antes nos demando 8; */
    background: url('../img/pubg.jpg') center /cover no-repeat;
    grid-column: 4 / 4;
    grid-row: 1 / 2;

}

.destaques__secundario:nth-child(3) {
    background: url('../img/slack.png') center / cover no-repeat;
    grid-column: 4 / 4;
    grid-row: 2/3;
}

.destaques__secundario:nth-child(4) {
    background: url('../img/whatsapp.png') center / cover no-repeat;
    grid-column: 4 / 5;
    grid-row: 3 / 4;
}

.destaques__secundario:nth-child(5) {
    background: url('../img/cs-go.jpg') center / cover no-repeat;
    grid-column: 3 / 4;
    grid-row: 3 /4;
}

/*Configuracion de la seccion de categorias dentro de destaques: */

/*nos piden que dividamos en cuatro elementos los elementos (items) de mi seccion categoria, es decir, dos columnas y dos filas con uno de esos elementos en cada una de esas secciones, para ello es necesario primero definir el espacio que tenemos para trabajar: */
.destaques__categorias {
    grid-column: 1 / 3;
    grid-row: 3 / 4; 
    /*con esto le estamos indicando a nuestra seccion de categorias como debe comportarse, la misma tiene que ocupar las dos primeras columnas de nuestra tercer fila.*/
}

/*ahora tenemos que posicionar los elementos de nuestra lista como mensionamos un poco más arriba: */
.destaques__categorias___lista {
    display: flex; /*esta propiedad me permite cambiar la forma que tengo de posicionar los elementos de mi lista*/
    flex-wrap: wrap; /*con esta propiedad le indico a mi elemento contenedor que este en algun punto que todavia no defini, se tiene que quebrar y pasar a la columna contigua.*/
    height: 100%;
    justify-content: space-between;
}

/*ahora tenemos que trabajar sobre los items de nuestra lista*/
.destaques__categorias___item {
    align-items: center; /*con esta propiedad puedo alinear al centro nuestros items.*/
    background: #fdfdfd; /*cambiamos el color de fondo de nuestro contenedor de items*/
    display: flex; /*como yo quiero que mis elementos se ubiquen en el centro de mi contenedor, tengo que cambiar la forma original en la que se comportan mis elementos.*/
    color: #333333; /*modifico el color de nuestro texto*/
    width: 50%; /*al elemento padre le dimos un width de 100%, por lo que los cuatro elementos ocuparon todo el ancho de su contenedor padre, ahora le estos asignando a cada elemento un ancho del 50% ese contenedor y como lo definimos con flex-wrap estos se quiebran para ubicarse en la posicion contigua siguiente. */
    padding: 1rem; /*le asigno un margen interno a nuestros elementos*/
}

/*en un principio no se aplico la modificacion del color de la fuente, esto se debe a que tenemos que indicarle a que el color va ser inherente al que estoy colocando en los links.*/
.destaques__categorias___link {
    color: inherit;
}

/*Para que nuestra seccion de destaques quede identica a nuestro prototipo falta agregarle un background a los titulos de nuestros aplicativos, los textos deben estar centrados en la parte de abajo con la fuente de color blanco: */
.destaques__titulo {
    color: #fdfdfd;
    background: rgb(0, 0, 0, 0.5); /*cuando quiero trabajar con opacidad, me conviene utilizar el formato 'rgb' para el color en el cual a traves del cuarto parametro puedo controlar dicha funcion.*/
    width: 100%;
    text-align: center;
    padding: .6rem;/*espaciamiento interno*/
}

/*solo nos falta ubicar nuestro titulo en la parte inferior de nuestro elemento, ahora bien, */
.box {
    display: flex; /*para cambiar la ubicacion de los elementos dentro de mi contenedor padre, es necesario aplicar esta propiedad.*/
    align-items: flex-end; /*ahora con esta propiedad los puedo ubicar tanto en la parte de arriba (padron) como en la parte de abajo*/
    justify-content: center; /*defino cómo el navegador va distribuir el espacio entre y alrededor de los items flex, a lo largo del eje principal de su contenedor*/
}



